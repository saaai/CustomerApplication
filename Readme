Folder Structure of CLI Project Angular 6 :
- Dist 
    - Dist folder is where the final compiled Java Script source code is. 
    - when the Project is compiled all the TS files are converted to JS.
    - The final output which we will take to production is all there in the dist folder.

- node_modules
    - whatever npm install we do, all those packages will get copied in this node_modules folder.

- e2e
    - end to end testing, this is where we will write our white box test. These white box tests will be fired on the source code.
    
- Src
    - Inside src folder we have something called app, where we will write all our source code.

- If you see the angular applications, it has 3 big technologies that work together.
    - Angular framework.
    - Type script which helps us to tranform into JS.
    - Node which is our packages manager.
        - So, for each one of these technologies it needs configuration files.
        - These JSON files which we see out in the project folder, Angular.json, package.json, tsconfig.json. these are all 3 configuration files for all these 3 technologies.
        - Angular - angular.json
        - Node - package.json
        - Typescript - tsconfig.json

- tslint.json file is used during the linting process, this process is used to check the source code for any errors. 
    Errors can be programmatic error or it can be stylistic errors. So, these checks are done during the coding phase itself.
    ex: if i write something in the code file during the coding phase itself it will say there is some error.
     
- Package.json 
    - Let's start looking at package.json, this is for node.
    - In package.json we can list down all our dependencies, and when we say "npm install"  it will install all the frameworks which are defined in the package.json
    - package.json has dependencies defined.
    - we can see something called as : dev dependencies
        - this dev dependencies are things which will not goto production.
        - these are used only during the development phase.
    - this package.json is having all the angular dependencies, becos of this only angular has been installed.

- tsconfig.json 
    - this file is for Typescript, to say the target folder after the ts is converted to js. 
    - how the compilation of the ts should take place.

- angular.json  
    - for angular purpose, the way angular has organised the project is as follows.
    - at the top we have app, inside the app we have the source code.
    - source root, says where is the src code in the project folder.
    - architect, says which kind of builders will run for which command.

- we will have a tsconfig.json file in the main folder of the project. 
    - in the app itself, we can have a tsconfig.json file.
    - tsconfig.app.json will take a lot of tsconfig.json file and also adds lots of spl of its.
    - we can have tsconfig.json file on the app and also we can tsconfig.app.json file for every project, so we can override it.
    - so, thats why we can see in the main root folder. we are having tsconfig.app.json and also tsconfig.json on the root.

- Now, when we ran "ng serve" it compiled in-memory. the angular application compiled in-memory and it ran the application.
    - what if i want to compile and create a dist folder for that we have proper command which is "ng build".
    - this "ng build" command will compile whatever that is there in the src folder and create the output in the dist folder and we can take this dist folder to production.

What is angular? what is the need of angular? architecture of angular? what goes inside the src folder?
- Angular is a binding framework. 
- It helps us bind the View and the Model. 
    - View (html) -----> Binding Code -------> Model (JavaScript Object)
- As a developer we have to write a lot of code which sends the data from the UI to model and from model to the UI.
- The code which binds the UI and model is very complex. In other words if the UI is having a tree view control tables right and JavaScript Object is also very complex then this binding code becomes complex and complex.
- So, angular says that dont worry about binding code I will handle it.
- If you look at angular.js website, they clearly says that (Model View whatever).
- Angular is a binding framework which binds the View and the Model.
- Ths binding code whatever you think about will be handled very easily by angular, sending the key events and raising the events back from the Object.

